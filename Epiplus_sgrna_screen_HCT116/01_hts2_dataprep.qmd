---
title:  CENPC Screen - HCT116 - sgRNA Epigenetics Plus - cellHTS2 Data prep
author: "Krishnendu extra/ Adib Keikhosravi/ Gianluca Pegoraro"
date: today
date-format: long
format: 
  html:
      self-contained: true
      code-fold: true
      code-tools: true
      code-link: true
editor: source
---

## README

This Script is used to generate the data formatted for CellHTS2 analysis.

## Setup

Load packages.

```{r}
#| label: load-libraries
#| message: false
#| warning: false

library(tidyverse)
library(data.table)
library(fs)
library(qs2)
library(cellHTS2)
```

### User variables input and settings specification

Set the working directory to the location of the script.

```{r}
here::i_am("Epiplus_sgrna_screen_HCT116/01_hts2_dataprep.qmd")
```

Set the relative paths to the metadata, input and output directories.

```{r}
#| label: input-variables

library(here)

METADATA_DIR <- here("Epiplus_sgrna_screen_HCT116", "hts2_metadata")

IN_DIR <- here("Epiplus_sgrna_screen_HCT116", "hts2_input")

OUT_DIR <- here("Epiplus_sgrna_screen_HCT116", "hts2_output")

OBJECT_DIR <- here("Epiplus_sgrna_screen_HCT116", "hitips_input")

SYNTHEGO_DIR <- here(
  "Epiplus_sgrna_screen_HCT116",
  "reformat_metadata",
  "Synthego"
)

RANDOMIZATION_DIR <- here(
  "Epiplus_sgrna_screen_HCT116",
  "reformat_metadata",
  "2020-01-17",
  "E5XX-1710_Transfer_1579272110.csv"
)

CACHE_DIR <- here(
  "Epiplus_sgrna_screen_HCT116",
  "cache"
)

GLOB_C <- "*.csv" # Pattern for Single Cell data files

XY_RES <- 0.108
Z_STEP <- 0.5
```

Generate the `r IN_DIR` directory for the well level Columbus data to be used in the`cellHTS2` analysis. In addition, create an empty template for the `cellHTS2` description file in the `r METADATA_DIR` directory. **This file contains information about the experiment, and it must be filled in in a text editor before continuing with the analysis. Without this file cellHTS2 won't run**.

```{r}
#| label: make-dir

if (!dir_exists(IN_DIR)) {
  dir_create(IN_DIR)
}

if (!file_exists(here(METADATA_DIR, "Description.txt"))) {
  templateDescriptionFile(filename = "Description.txt", path = METADATA_DIR)
}
```

Set the `knitr` options and the `ggplot2` theme.

```{r}
#| label: set-theme

theme_set(theme_bw())
```

## Data and metadata input and wrangling

Read the sgRNA layout information provided by Synthego for the Epigenetics Library. 3 sgRNA oligos per well. 3 plates.

```{r}
#| label: read-epi-gene-list

epi_gene_tbl <- dir_ls(
  path = SYNTHEGO_DIR,
  glob = "*qc.csv"
) |>
  map_df(
    read_csv,
    .id = "file_name",
    col_names = c(
      "mother_well",
      "gene_symbol",
      "oligo_seq"
    ),
    col_types = "ccc"
  ) |>
  mutate(synthego_barcode = file_name |> str_extract("set_[1-3]")) |>
  group_by(synthego_barcode, mother_well, gene_symbol) |>
  group_keys()

glimpse(epi_gene_tbl)
```

Read the sgRNA layout information provided by Synthego for the "Extra" Library. 3 sgRNA oligos per well. 1 plate.

```{r}
#| label: read-extra-gene-list

extra_gene_tbl <- read_csv(fs::path(SYNTHEGO_DIR, "guin_library.csv")) |>
  select(
    mother_well = item_position,
    gene_symbol = gene,
    oligo_seq = sequence
  ) |>
  mutate(synthego_barcode = "set_4") |>
  group_by(synthego_barcode, mother_well, gene_symbol) |>
  group_keys()

glimpse(extra_gene_tbl)
```

Concatenate Epigenetics gene table with extra gene table.

```{r}
#| label: contatenate-gene-lists

gene_tbl <- bind_rows(epi_gene_tbl, extra_gene_tbl)

glimpse(gene_tbl)
```

Assign the mappings from Synthego plates to 384-well PP Labcyte mother plates for the Epigenetics Library. Plates were transferred with a 1 to 1 exact mapping from Synthego to Mother(e.g. A1 -\> A1, B1 -\> B1, etc.). Mother Plates to Daughter plates were randomized for the epigenetics library (Plates 1 - 3), but not for the extra plate (Plate 4). Finally sgRNAs were transferred with a 1 to 1 exact mapping from Daughter to Imaging (e.g. A1 -\> A1, B1 -\> B1, etc.)

```{r}
#| label: set-plate-mappings

synthego_to_mother <- tibble(
  synthego_barcode = paste0("set_", 1:4),
  mother_barcode = c(
    "HT000609",
    "HT000610",
    "HT000611",
    "HT001005"
  )
)

dest_to_daughter <-
  tibble(
    daughter_barcode = c(paste0("HT0006", 39:41), "HT001080"),
    dest_barcode = paste0("dest_plate_", 1:4),
    plate = 1:4
  )

daughter_to_imaging <- tibble(
  daughter_barcode = rep(c(paste0("HT0006", 39:41), "HT001080"), 3),
  imaging_barcode = paste0("HT0010", 82:93)
)
```

Create a dummy randomization table for plate 4.

```{r}
#| label: generate-dummy-rand

extra_daughter_tbl <- tibble(
  file_name = fs::path(SYNTHEGO_DIR, "guin_library.csv"),
  source_barcode = "source_plate_4",
  mother_well = extra_gene_tbl |> pull(mother_well),
  dest_barcode = "dest_plate_4",
  imaging_well = mother_well,
  synthego_barcode = "set_4"
)

glimpse(extra_daughter_tbl)
```

Bring everything together to generate the plate layout table.

```{r}
#| label: generate-layout

layout_tbl <- read_csv(
  RANDOMIZATION_DIR,
  skip = 10,
  n_max = 826
) |>
  select(
    file_name = `Source Plate Name`,
    source_barcode = `Source Plate Barcode`,
    mother_well = `Source Well`,
    dest_barcode = `Destination Plate Barcode`,
    imaging_well = `Destination Well`
  ) |>
  mutate(synthego_barcode = file_name |> str_extract("set_[1-3]")) |>
  bind_rows(extra_daughter_tbl) |>
  left_join(synthego_to_mother, by = "synthego_barcode") |>
  left_join(dest_to_daughter, by = "dest_barcode") |>
  left_join(gene_tbl, by = c("synthego_barcode", "mother_well")) |>
  right_join(daughter_to_imaging, by = c("daughter_barcode")) |>
  select(
    file_name,
    synthego_barcode,
    mother_barcode,
    source_barcode,
    mother_well,
    daughter_barcode,
    dest_barcode,
    plate,
    imaging_barcode,
    imaging_well,
    gene_symbol
  )

write_tsv(layout_tbl, file = fs::path(CACHE_DIR, "plates_layout.txt"))

glimpse(layout_tbl)
```

Read the cell-level HiTIPS data from the text files. The object level data must be in the `OBJECT_DIR` and the file names *must match* the `r GLOB_C` `glob` pattern. Filter nuclei that are irregularly shaped (`solidity`) and that are too small (`area`).

```{r}
#| label: read-cells

cell_tbl <- dir_info(OBJECT_DIR, recurse = T, glob = GLOB_C) |>
  filter(size > "1K") |>
  rowwise() |>
  summarise(fread(path)) |>
  select(
    file_name = Experiment,
    plate_index = plate_ID,
    column,
    row,
    field_index,
    time_point,
    cell_index,
    area,
    solidity,
    k_corr_perc = clustering_percentage_r_correction,
    radial_dist_mean = mean_radial_distance,
    spots_number
  ) |>
  mutate(well_index = paste0(LETTERS[row], column)) |>
  arrange(
    file_name,
    plate_index,
    column,
    row,
    field_index,
    time_point,
    cell_index
  ) |>
  filter(
    area >= 30,
    solidity > 0.875
  )

glimpse(cell_tbl)
```

Cache the cell and spot level results in the `r CACHE_DIR` directory.

```{r}
#| label: cache-cell-results

qs_save(cell_tbl, fs::path(CACHE_DIR, "hitips_cell_results.qs2"))
```

Summarize the cell-level data into well-level data.

```{r}
#| label: summarize-cell

well_tbl_partial <- cell_tbl |>
  group_by(
    plate_index,
    well_index,
    row,
    column
  ) |>
  summarise(
    cell_n = n(),
    across(
      c(area, k_corr_perc:spots_number),
      list(mean = ~ mean(.x, rm.na = T))
    )
  ) |>
  ungroup() |>
  select(
    plate_index,
    row,
    column,
    well_index,
    cell_n:spots_number_mean
  ) |>
  arrange(
    plate_index,
    well_index,
    row,
    column
  )

glimpse(well_tbl_partial)
```

```{r}
#| label: horiz-pad-well-tbl

horiz_pad <- well_tbl_partial |>
  group_by(plate_index) |>
  group_modify(
    ~ tibble(
      row = rep(c(1L, 16L), 24),
      column = rep(1:24, each = 2),
      well_index = paste0(LETTERS[row], column),
      cell_n = NA,
      k_corr_perc_mean = NA,
      radial_dist_mean_mean = NA,
      spots_number_mean = NA
    )
  ) |>
  ungroup()


glimpse(horiz_pad)
```

```{r}
#| label: vert-pad-well-tbl

vert_pad <- well_tbl_partial |>
  group_by(plate_index) |>
  group_modify(
    ~ tibble(
      row = rep(2:15, 2),
      column = rep(c(1, 24), each = 14),
      well_index = paste0(LETTERS[row], column),
      cell_n = NA,
      k_corr_perc_mean = NA,
      radial_dist_mean_mean = NA,
      spots_number_mean = NA
    )
  ) |>
  ungroup()

glimpse(vert_pad)
```

```{r}
well_tbl <- bind_rows(well_tbl_partial, vert_pad, horiz_pad)

glimpse(well_tbl)
```

Cache the well level results in the `r CACHE_DIR` directory.

```{r}
#| label: cache-well-results
qs_save(well_tbl, fs::path(CACHE_DIR, "hitips_well_results.qs2"))
```

Create input and output folder hierarchies in the `r IN_DIR` and `r OUT_DIR` directories, respectively.

```{r}
well_tbl |>
  select(cell_n:spots_number_mean) |>
  names() |>
  walk(~ dir_create(fs::path(IN_DIR, .x)))

well_tbl |>
  select(cell_n:spots_number_mean) |>
  names() |>
  walk(~ dir_create(fs::path(OUT_DIR, .x)))
```

## `cellHTS2` data wrangling

### `Annotation`

Make the annotation file for `cellHTS2`, name it `Annotation.txt` and save it to the in the `r IN_DIR` directory.

```{r}
#| label: make-annotation-table

annotation_tbl <- layout_tbl |>
  group_by(plate, imaging_well, gene_symbol) |>
  group_keys() |>
  rename(
    Plate = plate,
    Well2 = imaging_well,
    GeneSymbol = gene_symbol
  ) |>
  mutate(
    Well = sprintf(
      "%s%02d",
      str_extract(Well2, "\\w"),
      as.numeric(str_extract(Well2, "\\d+"))
    ),
    GeneID = "N/A"
  ) |>
  arrange(Plate, Well)

glimpse(annotation_tbl)

write_tsv(annotation_tbl, file = fs::path(METADATA_DIR, "Annotation.txt"))
```

### `Plate Configuration`

Generate the configuration file `Plateconf.txt` for `cellHTS2` according to the documentation specifications: \> The software expects this to be a rectangular table in a tabulator delimited text file, with mandatory columns Plate, Well, Content, plus two additional header lines that give the total number of wells and plates (see Table ?? for an example). The content of this file (except the two header lines) are stored in slot plateConf of x. As the name suggests, the Content column provides the content of each well in the plate (here referred to as the well annotation). Mainly, this annotation falls into four categories: empty wells, wells targeting genes of interest, control wells, and wells containing other things that do not fit in the previous categories. The first two types of wells should be indicated in the Content column of the plate configuration file by empty and sample, respectively, while the last type of wells should be indicated by other. The designation for the control wells in the Content column is more flexible. By default, the software expects them to be indicated by pos (for positive controls), or neg (for negative controls). However, other names are allowed, given that they are specified by the user whenever necessary (for example, when calling the writeReport function). This versatility for the control wells' annotation is justified by the fact that, sometimes, multiple positive and/or negative controls can be employed in a given screen, making it useful to give different names to the distinct controls in the Content column. More- over, this versatility might be required in multi-channel screens for which we frequently have reporter-specific controls. The Well column contains the name of each well of the plate in alphanu- meric format (in this case, A01 to P24), while column Plate gives the plate number (1, 2, ...). These two columns are also allowed to contain regular expressions. In the plate configuration file, each well and plate should be covered by a rule, and in case of multiple definitions only the last one is considered. For example, in the file shown in Table ??, the rule specified by the first line after the column header indicates that all of the wells in each of the 57 assay plate contain "sample". However, a following rule indicate that the content of wells A01, A02 and B01 and B02 differ from "sample", containing other material (in this case, "other" and controls). Note that the well annotations mentioned above are used by the software in the normalization, quality control, and gene selection calculations. Data from wells that are annotated as empty are ignored, i. e. they are set to NA.

The configuration file tells `cellHTS2` where the samples, controls and empty wells are on each plate. The first 8 lines of the file (Headers and controls positions) are hardcoded for now. The samples layout are is appended from the processed information obtained from the Janus logs.

```{r}
#| label: make-plateconf-1

line1 <- "Wells: 384"
line2 <- "Plates: 4"
line3 <- "Plate\tWell\tContent"
line4 <- "*\t*\tempty"

odd_rows <- paste(LETTERS[seq(3, 15, by = 2)], collapse = ",")
even_rows <- paste(LETTERS[seq(2, 14, by = 2)], collapse = ",")

line5 <-
  paste0("*\t[", odd_rows, "]22\tneg") # sgScramble  in Column 22 odd rows (C, ..., O)
line6 <-
  paste0("*\t[", even_rows, "]22\tneg2") #  sgOR10A5  in Column 22 even rows (B, D, ..., N)
line7 <-
  paste0("*\t[", odd_rows, "]23\tkiller") #  sgPLK1 in Column 23 odd rows (C, ..., O)
line8 <-
  paste0("*\t[", even_rows, "]23\tpos") # sgNCAPH2 in Column 23 even rows (B, D, ..., N)

header <- c(line1, line2, line3, line4, line5, line6, line7, line8)

header

# Write header to file
conf <- file(fs::path(METADATA_DIR, "Plateconf.txt"), "w")
writeLines(header, conf)
close(conf)
```

The samples layout is appended from the processed information obtained from the annotation logs and is written out to the the `r METADATA_DIR` directory.

```{r}
#| label: make-plateconf-2

config_tbl <- annotation_tbl |>
  select(Plate, Well) |>
  mutate(Content = "sample")

glimpse(config_tbl)

write_tsv(
  config_tbl,
  file = fs::path(METADATA_DIR, "Plateconf.txt"),
  append = T
) # append
```

### `Measurements`

Generate a `Master_Barcode_List.txt` file and save it in the working directory (i.e. the same directory where the .Rmd file is). According to the `cellHTS2` specifications, the file should have these columns: `PlateName` (The plate barcode, as determined in the Janus log files, a string), `Plate` (The plate number in the library, a number), `Replicate` (Self explanatory, a number) and `Batch` (if the experiment or replicate was run in different batches, not necessary). This file contains the information on which plates have been analyzed, and on what the internal organization of the run is. The `Master_Barcode_List.txt` file is used to generate the measurement files to be read by `cellHTS2`.

```{r}
#| label: read-master-table

barcodes_tbl <- read_tsv(fs::path(METADATA_DIR, "Master_Barcode_List.txt"))

glimpse(barcodes_tbl)
```

### `Plate List`

Generate and writeout the `cellHTS2` Platelist.txt file in the `r IN_DIR` directory.

```{r}
#| label: make-plate-list

well_tbl |>
  left_join(barcodes_tbl, by = c("plate_index" = "PlateName")) |>
  pivot_longer(
    cols = cell_n:spots_number_mean,
    names_to = "measurement",
    values_to = "value"
  ) |>
  group_by(Plate, Replicate, Batch, measurement, plate_index) |>
  group_keys() |>
  mutate(Filename = paste0(plate_index, "_cellHTS2.txt")) |>
  group_by(measurement) |>
  group_walk(
    ~ write_tsv(
      select(.x, Filename, Plate, Replicate, Batch),
      fs::path(
        IN_DIR,
        .y$measurement,
        "Platelist.txt"
      )
    )
  )

dir_info(
  path = IN_DIR,
  glob = "*.txt",
  recurse = T
) |>
  select(1:2)
```

Reformat the well names according to cellHTS2 specifications and write out one `cellHTS2` measurement files on a per measurement, per plate basis in the `r IN_DIR` directory.

```{r}
#| label: make-measurements

meas_tbl <- left_join(
  well_tbl,
  barcodes_tbl,
  by = c("plate_index" = "PlateName")
) |>
  mutate(
    well_index = sprintf(
      "%s%02d",
      str_extract(well_index, "\\w"),
      as.numeric(str_extract(well_index, "\\d+"))
    )
  )

meas_tbl |>
  pivot_longer(
    cols = cell_n:spots_number_mean,
    values_to = "Value",
    names_to = "measurement"
  ) |>
  group_by(measurement, plate_index) |>
  group_walk(
    ~ write_tsv(
      select(.x, Plate, WellName = well_index, Value),
      fs::path(
        IN_DIR,
        .y$measurement,
        paste0(
          .y$plate_index,
          "_cellHTS2.txt"
        )
      ),
      col_names = F,
      na = "NaN"
    )
  )

dir_info(
  path = IN_DIR,
  glob = "*_cellHTS2.txt",
  recurse = T
) |>
  select(1:2)
```

Document the information about the analysis session

```{r}
#| label: session-info
#| results: markup
#|
sessionInfo()
```

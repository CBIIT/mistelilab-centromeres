---
title: "CENPC Screen - HCT116 sgRNA Epigenetics Plus - Single Cell Plots"
author: "Krishnendu Guin/ Adib Keikhosravi/ Gianluca Pegoraro"
date: today
date-format: long
format: 
  html:
      self-contained: true
      code-fold: true
      code-tools: true
      code-link: true
editor: source
---

## README

This script is used to plot the single cell analysis results obtained by using HiTIPS.

### Setup

```{r}
#| label: load-libraries
#| message: false
#| warning: false
#|
library(tidyverse)
library(ggthemes)
library(qs2)
```

```{r}
#| label: set-theme
#| include: false
#| warning: false

theme_set(theme_bw())
theme_update(
  axis.text.x = element_text(
    angle = -45,
    hjust = 0,
    vjust = 0.5
  ),
  axis.text.y = element_text(hjust = 0)
)
```

```{r}
here::i_am("Epiplus_sgrna_screen_HCT116/04_single_cell_plots.qmd")
```

### Read data

Read the table of genes for which single cell plots are desired

```{r}
library(here)

hits_path <- here(
  "Epiplus_sgrna_screen_HCT116",
  "reformat_metadata",
  "220330_hit_list_KG.csv"
)

hits_tbl <- read_csv(hits_path)

glimpse(hits_tbl)
```

Read single cell HiTIPS data generated by the `01_hts2_dataprep.Rmd` script

```{r}
single_cell_path <- here(
  "Epiplus_sgrna_screen_HCT116",
  "cache",
  "hitips_cell_results.qs2"
)

cell_tbl <- qs_read(single_cell_path)

glimpse(cell_tbl)
```

Read the annotation table generated by the `01_hts2_dataprep.Rmd` script. This table does not contain information about the controls in columns 22 and 23. For this reason, the `gene_symbol` variable in these wells is going to have `NA` values. 

```{r}
layout_path <- here("Epiplus_sgrna_screen_HCT116", "cache", "plates_layout.txt")

annotation_tbl <- read_tsv(layout_path)

glimpse(annotation_tbl)
```

Read the barcodes table

```{r}
master_barcodes_path <- here(
  "Epiplus_sgrna_screen_HCT116",
  "hts2_metadata",
  "Master_Barcode_List.txt"
)

barcodes_tbl <- read_tsv(master_barcodes_path) |>
  select(
    plate_index = PlateName,
    plate = Plate,
    bio_rep = Replicate
  )

glimpse(barcodes_tbl)
```

Manually create a table for controls positions:

- Samples in columns 2 - 21 (20 columns total)
- Controls in columbs 22 - 23

```{r}
class_levs <- c("sgScramble", "sgOR10A5", "sgNCAPH2", "sgPLK1", "Sample")

class_vec <- c(
  rep("Sample", 14 * 20),
  rep(c("sgOR10A5", "sgScramble"), 7),
  rep(c("sgNCAPH2", "sgPLK1"), 7)
)

control_tbl <- tibble(
  row = rep(2:15, 22),
  column = rep(2:23, each = 14),
  class = class_vec
) |>
  mutate(class = factor(class, levels = class_levs))

glimpse(control_tbl)
```

### Tables joins and filtering

Join the single cell data table with the annotation table. The annotation table does not contain information about the controls in columns 22 and 23. For this reason, in the output table the `gene_symbol` variable in these wells is going to have `NA` values. 

```{r}
cell_annotated_tbl <- cell_tbl |>
  left_join(barcodes_tbl, by = c("plate_index")) |>
  left_join(
    annotation_tbl,
    by = c(
      "plate_index" = "imaging_barcode",
      "well_index" = "imaging_well"
    )
  ) |>
  left_join(control_tbl, by = c("row", "column")) |>
  select(
    file_name = file_name.x,
    bio_rep,
    plate_index,
    plate = plate.x,
    row,
    column,
    well_index,
    gene_symbol,
    class,
    field_index:spots_number
  )

glimpse(cell_annotated_tbl)
```

Calculate the number of cells with no `gene_symbol` value. This is a count of cells in either controls or empty wells. 

```{r}
cell_annotated_tbl |>
  filter(is.na(gene_symbol)) |>
  group_by(plate_index, column) |>
  count()
```

This is instead a count of cells that are labelled as samples and do not have a `gene_symbol` value. These are empty wells that received no sgRNA

```{r}
cell_annotated_tbl |>
  filter(class == "Sample" & is.na(gene_symbol)) |>
  group_by(plate_index, column) |>
  count()
```

Filter out empty wells.

```{r}
cell_filtered_tbl <- cell_annotated_tbl |>
  filter(!(class == "Sample" & is.na(gene_symbol)))

glimpse(cell_filtered_tbl)
```

Create a table with only data for controls.

```{r}
cell_controls_tbl <- cell_filtered_tbl |>
  filter(class != "Sample") |>
  select(-gene_symbol)

glimpse(cell_controls_tbl)
```

Create a table with only data for samples.

```{r}
cell_samples_tbl <- cell_filtered_tbl |>
  filter(class == "Sample")

glimpse(cell_samples_tbl)
```

Create a a table for only genes that are part of the pick list

```{r}
cell_hits_tbl <- cell_samples_tbl |>
  inner_join(hits_tbl)

glimpse(cell_hits_tbl)
```

```{r}
cell_controls_tbl |>
  filter(class != "sgPLK1" & plate_index == "HT001083") |>
  count(class, well_index)
```

Summarize the different variables for the controls at the well level.

```{r}
well_controls_tbl <- cell_controls_tbl |>
  group_by(plate_index, bio_rep, class, well_index) |>
  summarize(across(area:spots_number, list(mean = ~ mean(.x, na.rm = TRUE)))) |>
  ungroup()

glimpse(well_controls_tbl)
```

### Controls Single Cell Plots

This is a density plot of single cell values for the number of CENPC Spots per cell only for the controls. Each density line corresponds to one well. Rows facets are biological replicates, Column facets are plate library numbers.  

```{r}
#| label: spots-n-dens,
#| fig.width: 12

cell_controls_tbl |>
  filter(class != "sgPLK1") |>
  ggplot(aes(
    x = spots_number,
    group = well_index,
    color = class,
    fill = class
  )) +
  geom_density(alpha = 0.1) +
  coord_cartesian(xlim = c(0, 60)) +
  scale_color_few(name = "Control") +
  scale_fill_few(name = "Control") +
  facet_grid(vars(bio_rep), vars(plate)) +
  labs(
    x = "Number of CENPC Spots per Cell",
    y = "Density"
  )
```

Same as above, but this time the cumulative distribution (ECDF) is plotted.

```{r}
#| label: spots-n-ecdf,
#| fig.width: 12

cell_controls_tbl |>
  filter(class != "sgPLK1") |>
  ggplot(aes(
    x = spots_number,
    group = well_index,
    color = class
  )) +
  stat_ecdf() +
  coord_cartesian(xlim = c(0, 60)) +
  scale_color_few(name = "Control") +
  facet_grid(vars(bio_rep), vars(plate)) +
  labs(
    x = "Number of CENPC Spots per Cell",
    y = "Cumulative Fraction"
  )
```

This is a density plot of single cell values for the percentage of the Ripley's K function over random (a proxy for CENPC spots clustering, higher values mean more clustering) only for the controls. Each density line corresponds to one well. Rows facets are biological replicates, Column facets are plate library numbers. 

```{r}
#| label: ripley-k-dens,
#| fig.width: 12

cell_controls_tbl |>
  filter(class != "sgPLK1") |>
  ggplot(aes(
    x = k_corr_perc,
    group = well_index,
    color = class,
    fill = class
  )) +
  geom_density(alpha = 0.1) +
  scale_color_few(name = "Control") +
  scale_fill_few(name = "Control") +
  facet_grid(vars(bio_rep), vars(plate)) +
  labs(
    x = "Perc. of Ripley's K Curve Over Random",
    y = "Density"
  )
```

Same as above, but this time the cumulative distribution (ECDF) is plotted.

```{r}
#| label: ripley-k-ecdf,
#| fig.width: 12

cell_controls_tbl |>
  filter(class != "sgPLK1") |>
  ggplot(aes(
    x = k_corr_perc,
    group = well_index,
    color = class
  )) +
  stat_ecdf() +
  coord_cartesian(xlim = c(0, 100)) +
  scale_color_few(name = "Control") +
  facet_grid(vars(bio_rep), vars(plate)) +
  labs(
    x = "Perc. of Ripley's K Curve Over Random",
    y = "Cumulative Fraction"
  )
```

### Single Cell ECDF Plots for CENPC Spot Number (Samples)

Now plot the ECDF curves for all hits. For the samples (Orange, solid line), each curve is a single well from one biological replicate. For sgScramble(Blue, dashed line) and the sgNCAPH2 (Green, dashed line), each line represents the distributions for all the controls for one of the two biological replicates.

```{r}
#| label: plot-ecdf

plot_ecdf <- function(df, property, x_lims = c(0, 100)) {
  df |>
    ggplot(aes(
      x = {{ property }},
      group = bio_rep
    )) +
    stat_ecdf(color = "#FAA43A") +
    stat_ecdf(
      data = cell_controls_tbl |> filter(class == "sgScramble"),
      aes(
        x = {{ property }},
        group = bio_rep
      ),
      color = "#5DA5DA",
      linetype = "longdash"
    ) +
    stat_ecdf(
      data = cell_controls_tbl |> filter(class == "sgNCAPH2"),
      aes(
        x = {{ property }},
        group = bio_rep
      ),
      color = "#60BD68",
      linetype = "longdash"
    ) +
    coord_cartesian(xlim = x_lims) +
    facet_wrap(vars(gene_symbol)) +
    labs(y = "Cumulative Fraction")
}
```

```{r}
#| label: spots-n-ecdf-samples
#| fig.height: 9
#| fig.width: 12

cell_hits_tbl |>
  group_by(plotting_group) |>
  group_map(~ plot_ecdf(.x, spots_number, x_lims = c(0, 60)))
```

### Single Cell ECDF Plots for Repley's K (Samples)

```{r ripleys-k-ecdf-samples, fig.height = 9, fig.width = 12, echo=FALSE}
#| label: ripley-k-ecdf-samples
#| fig.height: 9
#| fig.width: 12

cell_hits_tbl |>
  group_by(plotting_group) |>
  group_map(~ plot_ecdf(.x, k_corr_perc))
```

### Well Level Plots for Controls

```{r}
#| label: plot-crossbar

plot_crossbar <- function(df, property, y_legend = "") {
  df |>
    filter(class != "sgPLK1") |>
    ggplot(aes(
      x = class,
      y = {{ property }}
    )) +
    geom_point(
      alpha = 0.3,
      position = position_jitter(width = 0.2)
    ) +
    stat_summary(
      fun.data = "mean_sdl",
      fun.args = list(mult = 1),
      geom = "crossbar"
    ) +
    facet_wrap(vars(bio_rep)) +
    labs(
      x = "sgRNA",
      y = y_legend
    )
}
```

```{r}
#| label: spots-n-crossbar-controls

well_controls_tbl |>
  plot_crossbar(
    property = spots_number_mean,
    y_legend = "Mean Number of CENPC Spots per Cell\nMean per Well+/-SD"
  )
```

```{r}
#| label: k-crossbar-controls

well_controls_tbl |>
  plot_crossbar(
    property = k_corr_perc_mean,
    y_legend = "K Clustering Score\nMean per Well+/-SD"
  )
```

Document the information about the analysis session

```{r sessionInfo, results='markup'}
sessionInfo()
```

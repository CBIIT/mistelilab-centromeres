---
title: "CENPC Screen - Joint HCT116/TERT-RPE1 - sgRNA Epigenetics Plus - downstream_Analysis"
author: "Krishnendu Guin/ Adib Keikhosravi / Gianluca Pegoraro"
date: today
date-format: long
format: 
  html:
      self-contained: true
      code-fold: true
      code-tools: true
      code-link: true
editor: source
---

### Analysis setup

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(tidyverse)
library(ggthemes)
library(ggrepel)
library(fs)
```

```{r}
#| label: set-theme
#| include: false

theme_set(theme_bw())
theme_update(
  axis.text.x = element_text(
    angle = -90,
    hjust = 0,
    vjust = 0.5
  ),
  axis.text.y = element_text(hjust = 0)
)
```

### Read and process the final results from the screen cellHTS2 analysis

Read the final results from the CRISPR-KO screen cellHTS2 analysis for both the HCT116-Cas9 and RPE1-Cas9 cell lines.

```{r}
read_hts2_results <- function(path, glob) {
  dir_ls(
    path = path,
    recurse = T,
    glob = glob
  ) |>
    map_df(read_csv)
}

glob_path <- "*_all_genes.csv"

all_tbl <- read_hts2_results("input", glob_path)
```

Process the final results to generate a wide format table for plotting. Each row in the table corresponds to a unique plate/well combination. Each sgRNA treatment in the library corresponds to a unique plate/well combination. Positive and negative sgRNAcontrols are also included in the table and but have multiple plate/well combinations. This wide table will also be used to generate the list of hits for either cell line.

```{r}
all_tbl_wide <- all_tbl |> 
  pivot_wider(
    names_from = cell_line,
    values_from = score_area_mean:sd_spots_number_mean
  )

rmarkdown::paged_table(all_tbl_wide)
```

Create a list of hits. Positive and negative sgRNA controls are not in the list of hits. Hits are defined as sgRNAs that have a z-score greater than 2.5 or less than -2.5 for Ripley's K or for the spots number for either cell line. Write the list of hits to a csv file.

```{r}
all_hits_tbl <- all_tbl_wide |>
  filter(control == "sample") |>
  filter(
     score_area_mean_HCT116 > 2.5 | 
     score_area_mean_HCT116 < -2.5 |
     score_area_mean_RPE1 > 2.5 | 
     score_area_mean_RPE1 < -2.5 |
     score_spots_number_mean_HCT116 > 2.5 | 
     score_spots_number_mean_HCT116 < -2.5 |
     score_spots_number_mean_RPE1 > 2.5 | 
     score_spots_number_mean_RPE1 < -2.5
  ) |>
  filter(score_cell_n_HCT116 > -2.5 | score_cell_n_RPE1 > -2.5)

all_hits_tbl |> write_csv("output/all_hits_tbl.csv")

rmarkdown::paged_table(all_hits_tbl)
```

Now filter the all_tbl_wide table to include only the hits that are common to both cell lines (i.e. they are a hit in both cell lines).

```{r}
common_hits_tbl <- all_hits_tbl |>
  filter(
    (score_spots_number_mean_HCT116 < -2.5 | 
     score_spots_number_mean_HCT116 > 2.5 | 
     score_k_corr_perc_mean_HCT116 < -2.5 | 
     score_k_corr_perc_mean_HCT116 > 2.5) &
    (score_spots_number_mean_RPE1 < -2.5 | 
     score_spots_number_mean_RPE1 > 2.5 |
     score_k_corr_perc_mean_RPE1 < -2.5 | 
     score_k_corr_perc_mean_RPE1 > 2.5)
  )

rmarkdown::paged_table(common_hits_tbl)
```

Add a column to the all_tbl_wide table to indicate if the sgRNA is a common hit.

```{r}
all_tbl_wide <- all_tbl_wide |>
  mutate(
    common_hit = gene_symbol %in% pull(common_hits_tbl, gene_symbol)
  )

rmarkdown::paged_table(all_tbl_wide)
```

### Plotting 

```{r}
plot_cell_lines <- function(df, 
                          x_variable, 
                          y_variable, 
                          plot_title = "") {
  df |>
  filter(control == "sample") |>
  mutate(
    marker = ifelse(
      common_hit,
      gene_symbol,
      ""
    )
  ) |>
    ggplot(
      aes(
        x = {{x_variable}}, 
        y = {{y_variable}},
        color = control,
        label = marker
      )
    ) +
    geom_text_repel(
      box.padding = 0.5,
      max.overlaps = Inf,
      color = "black"
    ) +
    geom_point(shape = 21) + 
    geom_smooth(
      method = "lm",
      color = "grey50"
    ) +
    scale_color_few(name = "Treatment") +
    coord_equal() +
    xlab("Z-score HCT116") +
    ylab("Z-score RPE1") +
    ggtitle(plot_title)
}
```

```{r}
#| label: spots-n-hct116-rpe1

all_tbl_wide |>
  plot_cell_lines(
    x_variable = score_spots_number_mean_HCT116,
    y_variable = score_spots_number_mean_RPE1,
    plot_title = "Number of CENPC Spots"
  )
```

```{r}
#| label: k-corr-perc--hct116-rpe1

all_tbl_wide |>
  plot_cell_lines(
    x_variable = score_k_corr_perc_mean_HCT116,
    y_variable = score_k_corr_perc_mean_RPE1,
    plot_title = "Percentage of K Function above Poisson"
  )
```

# Statistics

```{r}
#| label: statistics

all_tbl_wide |>
  filter(control == "sample") |>
  summarise(
    corr_spots_n = cor(score_spots_number_mean_HCT116, score_spots_number_mean_RPE1, method = "pearson"),
    corr_k_corr_perc = cor(score_k_corr_perc_mean_HCT116, score_k_corr_perc_mean_RPE1, method = "pearson")
  )
```

Document the information about the analysis session

```{r}
#| label: session-info
#| results: markup

sessionInfo()
```

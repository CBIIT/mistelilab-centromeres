---
title: "CENPC Screen - Joint HCT116/TERT-RPE1 - sgRNA Epigenetics Plus - Downstream Analysis"
author: "Krishnendu Guin/ Adib Keikhosravi / Gianluca Pegoraro"
date: today
date-format: long
format: 
  html:
      self-contained: true
      code-fold: true
      code-tools: true
      code-link: true
      df-print: paged
editor: source
---

### Analysis setup

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(tidyverse)
library(ggthemes)
library(ggrepel)
library(fs)
```

```{r}
#| label: set-theme
#| include: false

theme_set(theme_bw())
theme_update(
  axis.text.x = element_text(
    angle = -90,
    hjust = 0,
    vjust = 0.5
  ),
  axis.text.y = element_text(hjust = 0)
)
```

```{r}
here::i_am("hct116_rpe1_results_plotting.qmd")
```

### Read and process the final results from the screen cellHTS2 analysis

Read the final results from the CRISPR-KO screen cellHTS2 analysis for both the HCT116-Cas9 and RPE1-Cas9 cell lines.

```{r}
library(here)

read_hts2_results <- function(path, glob) {
  dir_ls(
    path = path,
    recurse = T,
    glob = glob
  ) |>
    map_df(read_csv)
}

glob_path <- "*_all_genes.csv"

all_tbl <- read_hts2_results(here(), glob_path)

all_tbl
```

Process the final results to generate a wide format table for plotting. Each row in the table corresponds to a unique plate/well combination. Each sgRNA treatment in the library corresponds to a unique plate/well combination. Positive and negative sgRNAcontrols are also included in the table but have multiple plate/well combinations. This wide table will also be used to generate the list of hits for either cell line.

```{r}
all_tbl_wide <- all_tbl |>
  pivot_wider(
    names_from = cell_line,
    values_from = score_area_mean:sd_spots_number_mean
  ) |>
  relocate(
    c(
      score_k_corr_perc_mean_HCT116,
      score_k_corr_perc_mean_RPE1,
      score_spots_number_mean_HCT116,
      score_spots_number_mean_RPE1
    ),
    .after = gene_symbol
  )

all_tbl_wide |> write_csv(here("output", "all_sgrna_tbl.csv"))

all_tbl_wide
```

Create a list of hits in either cell line. Positive and negative sgRNA controls are not in the list of hits. Hits are defined as sgRNAs that have a z-score greater than 2.5 or less than -2.5 for Ripley's K or for the spots number for either cell line. Also, make sure that for each z-score mean, its absolute value is larger than the respective standard deviation. Write the list of hits to a csv file.

```{r}
hit_cutoff <- 2.5
cell_n_cutoff <- 2.5

all_hits_tbl <- all_tbl_wide |>
  filter(control == "sample") |>
  filter(
    (abs(score_k_corr_perc_mean_HCT116) > hit_cutoff) &
      (abs(score_k_corr_perc_mean_HCT116) > sd_k_corr_perc_mean_HCT116) |
      (abs(score_k_corr_perc_mean_RPE1) > hit_cutoff) &
        (abs(score_k_corr_perc_mean_RPE1) > sd_k_corr_perc_mean_RPE1) |
      (abs(score_spots_number_mean_HCT116) > hit_cutoff) &
        (abs(score_spots_number_mean_HCT116) > sd_spots_number_mean_HCT116) |
      (abs(score_spots_number_mean_RPE1) > hit_cutoff) &
        (abs(score_spots_number_mean_RPE1) > sd_spots_number_mean_RPE1)
  ) |>
  filter(
    score_cell_n_HCT116 > -cell_n_cutoff | score_cell_n_RPE1 > -cell_n_cutoff
  ) |>
  arrange(desc(score_k_corr_perc_mean_HCT116))

all_hits_tbl |> write_csv(here("output", "all_hits_tbl.csv"))

all_hits_tbl
```
Create new indicator variables to show if a certain sgRNA is a hit or not for each cell line and for each parameter (i.e. Ripley's K or the number of CENPC spots per cell).

```{r}
#| label: hits-n-calculations

n_hits_tbl <- all_hits_tbl |>
  select(plate:score_cell_n_RPE1) |>
  mutate(across(
    score_k_corr_perc_mean_HCT116:score_spots_number_mean_RPE1,
    list(pos = ~ abs(.x) > hit_cutoff)
  ))

n_hits_tbl
```

Let's calculate the number of positive hits for each cell line and for each parameter (i.e. Ripley's K or the number of CENPC spots per cell). Bear in mind that the number of hits in each category is not going to sum up to the total number of hits, because there is overlap between the categories all the categories of hits. 

```{r}
n_hits_tbl |>
  summarise(across(
    score_k_corr_perc_mean_HCT116_pos:score_spots_number_mean_RPE1_pos,
    list(n = sum)
  ))
```

Calculate the number of hits for HCT116 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_hct116 <- n_hits_tbl |>
  filter(score_k_corr_perc_mean_HCT116_pos | score_spots_number_mean_HCT116_pos)

n_hits_tbl_hct116 |> write_csv(here("output", "hct116_hits_tbl.csv"))

n_hits_tbl_hct116 |>
  nrow()
```

Calculate the number of hits for RPE1 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_RPE1 <- n_hits_tbl |>
  filter(score_k_corr_perc_mean_RPE1_pos | score_spots_number_mean_RPE1_pos)

n_hits_tbl_RPE1 |> write_csv(here("output", "RPE1_hits_tbl.csv"))

n_hits_tbl_RPE1 |>
  nrow()
```

Calculate the number of hits that are unique for HCT116 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_hct116_unique <- n_hits_tbl |>
  filter((score_k_corr_perc_mean_HCT116_pos | score_spots_number_mean_HCT116_pos) &
    !(score_k_corr_perc_mean_RPE1_pos | score_spots_number_mean_RPE1_pos))

n_hits_tbl_hct116_unique |> write_csv(here("output", "hct116_unique hits_tbl.csv"))

n_hits_tbl_hct116_unique |>
  nrow()
```

Calculate the number of hits that are unique for RPE1 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_RPE1_unique <- n_hits_tbl |>
  filter((score_k_corr_perc_mean_RPE1_pos |score_spots_number_mean_RPE1_pos) &
    !(score_k_corr_perc_mean_HCT116_pos | score_spots_number_mean_HCT116_pos))

n_hits_tbl_RPE1_unique |> write_csv(here("output", "RPE1_unique hits_tbl.csv"))

n_hits_tbl_RPE1_unique |>
  nrow()
```

Now filter the all_tbl_wide table to include only the hits that are common to both cell lines (i.e. they are a hit in both cell lines). Write the common hits to a csv file.

```{r}
common_hits_tbl <- all_hits_tbl |>
  filter(
    ((abs(score_spots_number_mean_HCT116) > hit_cutoff) |
      (abs(score_k_corr_perc_mean_HCT116) > hit_cutoff)) &
      ((abs(score_spots_number_mean_RPE1) > hit_cutoff) |
        (abs(score_k_corr_perc_mean_RPE1) > hit_cutoff))
  ) |>
  arrange(desc(score_k_corr_perc_mean_HCT116))

common_hits_tbl |> write_csv(here("output", "common_hits_tbl.csv"))

common_hits_tbl
```


### Add Back Manual Annotations for Common Hits

First read the common hits table that was annotated manually to indicate whether the sgRNA causes nuclear defects, what biological process is affected, and whether to add the label in the dot plot or not.

```{r}
common_hits_tbl_annotated <- read_csv(here(
  "metadata",
  "common_hits_tbl_annotated.csv"
)) |>
  select(plate:label)

common_hits_tbl_annotated
```

Join the information in the `common_hits_tbl_annotated` table with the `all_tbl_wide` table.

```{r}
all_tbl_annotated <- all_tbl |>
  left_join(
    common_hits_tbl_annotated,
    by = c("plate", "well", "control", "gene_symbol")
  ) |>
  relocate(nuclear_segmentation:label, .after = gene_symbol)

all_tbl_annotated
```

```{r}
cat_vec <- c(
  "Non-hit",
  "Other",
  "Chromatin structure",
  "Transcription",
  "Replication",
  "Nucleolus",
  "Nuclear pore",
  "Kinetochore"
)

all_tbl_wide_annotated <- all_tbl_annotated |>
  pivot_wider(
    names_from = cell_line,
    values_from = score_area_mean:sd_spots_number_mean
  ) |>
  relocate(
    c(
      score_k_corr_perc_mean_HCT116,
      score_k_corr_perc_mean_RPE1,
      score_spots_number_mean_HCT116,
      score_spots_number_mean_RPE1
    ),
    .after = gene_symbol
  ) |>
  mutate(
    nuclear_segmentation = if_else(
      is.na(nuclear_segmentation),
      "other",
      nuclear_segmentation
    ),
    category = if_else(is.na(category), "Non-hit", category),
    label = if_else(is.na(label), "no", label)
  ) |>
  mutate(category = factor(category, levels = cat_vec))

all_tbl_wide_annotated |>
  write_csv(here("output", "all_sgrna_tbl_annotated.csv"))

all_tbl_wide_annotated
```

### Plotting Replicate1 vs. Replicate2

```{r}
plot_replicates <- function(df, x_variable, y_variable, plot_title = "") {
  df |>
    filter(control != "killer") |>
    ggplot(
      aes(
        x = {{ x_variable }},
        y = {{ y_variable }},
        color = control,
      )
    ) +
    geom_point(shape = 21) +
    geom_smooth(
      method = "lm",
      color = "grey50"
    ) +
    scale_color_tableau(name = "Treatment") +
    facet_wrap(vars(cell_line)) +
    xlab("Z-score Replicate 1") +
    ylab("Z-score Replicate 2") +
    ggtitle(plot_title)
}
```

```{r}
#| label: plot-replicates-spots-number
#| fig.height: 8
#| fig.width: 12

all_tbl_annotated |>
  plot_replicates(
    x_variable = norm_repeat1_spots_number_mean,
    y_variable = norm_repeat2_spots_number_mean,
    plot_title = "Number of CENPC Spots per Cell"
  )
```

```{r}
#| label: plot-replicates-k-corr-perc
#| fig.height: 8
#| fig.width: 12

all_tbl_annotated |>
  plot_replicates(
    x_variable = norm_repeat1_k_corr_perc_mean,
    y_variable = norm_repeat2_k_corr_perc_mean,
    plot_title = "CENPC Spots K Clustering Score"
  )
```

### Plotting Cell Line vs. Cell Line

```{r}
plot_cell_lines <- function(df, x_variable, y_variable, plot_title = "") {
  df |>
    filter(control == "sample") |>
    mutate(
      marker = ifelse(
        label == "yes",
        gene_symbol,
        ""
      ),
      alpha_dot = ifelse(
        category == "Non-hit",
        0.5,
        1
      )
    ) |>
    ggplot(
      aes(
        x = {{ x_variable }},
        y = {{ y_variable }},
        color = category,
        label = marker,
        alpha = alpha_dot
      )
    ) +
    geom_text_repel(
      box.padding = 0.5,
      max.overlaps = Inf,
      color = "black"
    ) +
    geom_point() +
    geom_smooth(
      method = "lm",
      color = "grey50"
    ) +
    scale_color_few(name = "Category") +
    guides(alpha = "none") +
    xlab("Z-score HCT116") +
    ylab("Z-score RPE1") +
    ggtitle(plot_title)
}
```

```{r}
#| label: spots-n-hct116-rpe1
#| fig.height: 8
#| fig.width: 12

all_tbl_wide_annotated |>
  plot_cell_lines(
    x_variable = score_spots_number_mean_HCT116,
    y_variable = score_spots_number_mean_RPE1,
    plot_title = "Number of CENPC Spots per Cell"
  )
```

```{r}
#| label: k-corr-perc-hct116-rpe1
#| fig.height: 8
#| fig.width: 12

all_tbl_wide_annotated |>
  plot_cell_lines(
    x_variable = score_k_corr_perc_mean_HCT116,
    y_variable = score_k_corr_perc_mean_RPE1,
    plot_title = "CENPC Spots K Clustering Score"
  )
```

# Statistics

```{r}
#| label: statistics

all_tbl_wide_annotated |>
  filter(control == "sample") |>
  summarise(
    corr_spots_n = cor(
      score_spots_number_mean_HCT116,
      score_spots_number_mean_RPE1,
      method = "pearson"
    ),
    corr_k_corr_perc = cor(
      score_k_corr_perc_mean_HCT116,
      score_k_corr_perc_mean_RPE1,
      method = "pearson"
    )
  )
```

Document the information about the analysis session

```{r}
#| label: session-info
#| results: markup

sessionInfo()
```

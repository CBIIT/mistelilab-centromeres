---
title: "CENPC Screen - Joint HCT116/TERT-RPE1 - sgRNA Epigenetics Plus - Downstream Analysis"
author: "Krishnendu Guin/ Adib Keikhosravi / Gianluca Pegoraro"
date: today
date-format: long
format: 
  html:
      self-contained: true
      code-fold: true
      code-tools: true
      code-link: true
      df-print: paged
editor: source
---

### Analysis setup

Load libraries

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(tidyverse)
library(ggthemes)
library(ggrepel)
library(ggforce)
library(fs)
```

Set the working directory to the location of the script using the `here` package.

```{r}
here::i_am("hct116_rpe1_results_plotting.qmd")
```

Load `here` and utilitiy functions to make the code more portable.

```{r}
library(here)
source(here("funcs", "utilities.R"))
```

```{r}
#| label: set-theme
#| include: false

theme_set(theme_bw())
theme_update(
  axis.text.x = element_text(
    angle = -90,
    hjust = 0,
    vjust = 0.5
  ),
  axis.text.y = element_text(hjust = 0)
)
```

### Read and process the final results from the screen cellHTS2 analysis

Read the final results from the CRISPR-KO screen cellHTS2 analysis for both the HCT116-Cas9 and RPE1-Cas9 cell lines.

```{r}
glob_path <- "*_all_genes.csv"

all_tbl <- read_hts2_results(here(), glob_path)

all_tbl
```

Process the final results to generate a wide format table for plotting. Each row in the table corresponds to a unique plate/well combination. Each sgRNA treatment in the library corresponds to a unique plate/well combination. Positive and negative sgRNAcontrols are also included in the table but have multiple plate/well combinations. This wide table will also be used to generate the list of hits for either cell line.

```{r}
all_tbl_wide <- all_tbl |>
  pivot_wider(
    names_from = cell_line,
    values_from = score_area_mean:sd_spots_number_mean
  ) |>
  relocate(
    c(
      score_k_corr_perc_mean_HCT116,
      score_k_corr_perc_mean_RPE1,
      score_spots_number_mean_HCT116,
      score_spots_number_mean_RPE1
    ),
    .after = gene_symbol
  )

all_tbl_wide |> write_csv(here("output", "all_sgrna_tbl.csv"))

all_tbl_wide
```

Create a list of hits in either cell line. Positive and negative sgRNA controls are not in the list of hits. Hits are defined as sgRNAs that have a z-score greater than 2.5 or less than -2.5 for Ripley's K or for the spots number for either cell line. Also, make sure that for each z-score mean, its absolute value is larger than the respective standard deviation. Write the list of hits to a csv file.

```{r}
hit_cutoff <- 2.5
cell_n_cutoff <- 2.5

all_hits_tbl <- all_tbl_wide |>
  filter(control == "sample") |>
  filter(
    (abs(score_k_corr_perc_mean_HCT116) > hit_cutoff) &
      (abs(score_k_corr_perc_mean_HCT116) > sd_k_corr_perc_mean_HCT116) |
      (abs(score_k_corr_perc_mean_RPE1) > hit_cutoff) &
        (abs(score_k_corr_perc_mean_RPE1) > sd_k_corr_perc_mean_RPE1) |
      (abs(score_spots_number_mean_HCT116) > hit_cutoff) &
        (abs(score_spots_number_mean_HCT116) > sd_spots_number_mean_HCT116) |
      (abs(score_spots_number_mean_RPE1) > hit_cutoff) &
        (abs(score_spots_number_mean_RPE1) > sd_spots_number_mean_RPE1)
  ) |>
  filter(
    score_cell_n_HCT116 > -cell_n_cutoff | score_cell_n_RPE1 > -cell_n_cutoff
  ) |>
  arrange(desc(score_k_corr_perc_mean_HCT116))

all_hits_tbl |> write_csv(here("output", "all_hits_tbl.csv"))

all_hits_tbl
```

Create new indicator variables to show if a certain sgRNA is a hit or not for each cell line and for each parameter (i.e. Ripley's K or the number of CENPC spots per cell).

```{r}
#| label: hits-n-calculations

n_hits_tbl <- all_hits_tbl |>
  select(plate:score_cell_n_RPE1) |>
  mutate(across(
    score_k_corr_perc_mean_HCT116:score_spots_number_mean_RPE1,
    list(pos = ~ abs(.x) > hit_cutoff)
  ))

n_hits_tbl
```

Let's calculate the number of positive hits for each cell line and for each parameter (i.e. Ripley's K or the number of CENPC spots per cell). Bear in mind that the number of hits in each category is not going to sum up to the total number of hits, because there is overlap between the categories all the categories of hits. 

```{r}
n_hits_tbl |>
  summarise(across(
    score_k_corr_perc_mean_HCT116_pos:score_spots_number_mean_RPE1_pos,
    list(n = sum)
  ))
```

Calculate the number of hits for HCT116 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_hct116 <- n_hits_tbl |>
  filter(score_k_corr_perc_mean_HCT116_pos | score_spots_number_mean_HCT116_pos)

n_hits_tbl_hct116 |> write_csv(here("output", "hct116_hits_tbl.csv"))

n_hits_tbl_hct116 |>
  nrow()
```

Calculate the number of hits for RPE1 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_RPE1 <- n_hits_tbl |>
  filter(score_k_corr_perc_mean_RPE1_pos | score_spots_number_mean_RPE1_pos)

n_hits_tbl_RPE1 |> write_csv(here("output", "RPE1_hits_tbl.csv"))

n_hits_tbl_RPE1 |>
  nrow()
```

Calculate the number of hits that are unique for HCT116 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_hct116_unique <- n_hits_tbl |>
  filter(
    (score_k_corr_perc_mean_HCT116_pos | score_spots_number_mean_HCT116_pos) &
      !(score_k_corr_perc_mean_RPE1_pos | score_spots_number_mean_RPE1_pos)
  )

n_hits_tbl_hct116_unique |>
  write_csv(here("output", "hct116_unique hits_tbl.csv"))

n_hits_tbl_hct116_unique |>
  nrow()
```

Calculate the number of hits that are unique for RPE1 for either Ripley's K or the number of CENPC spots per cell.

```{r}
n_hits_tbl_RPE1_unique <- n_hits_tbl |>
  filter(
    (score_k_corr_perc_mean_RPE1_pos | score_spots_number_mean_RPE1_pos) &
      !(score_k_corr_perc_mean_HCT116_pos | score_spots_number_mean_HCT116_pos)
  )

n_hits_tbl_RPE1_unique |> write_csv(here("output", "RPE1_unique hits_tbl.csv"))

n_hits_tbl_RPE1_unique |>
  nrow()
```

Now filter the all_tbl_wide table to include only the hits that are common to both cell lines (i.e. they are a hit in both cell lines). Write the common hits to a csv file.

```{r}
common_hits_tbl <- all_hits_tbl |>
  filter(
    ((abs(score_spots_number_mean_HCT116) > hit_cutoff) |
      (abs(score_k_corr_perc_mean_HCT116) > hit_cutoff)) &
      ((abs(score_spots_number_mean_RPE1) > hit_cutoff) |
        (abs(score_k_corr_perc_mean_RPE1) > hit_cutoff))
  ) |>
  arrange(desc(score_k_corr_perc_mean_HCT116))

common_hits_tbl |> write_csv(here("output", "common_hits_tbl.csv"))

common_hits_tbl
```


### Add Back Manual Annotations for Common Hits

First read the common hits table that was annotated manually to indicate whether the sgRNA causes nuclear defects, what biological process is affected, and whether to add the label in the dot plot or not.

```{r}
common_hits_annotations <- read_csv(here(
  "metadata",
  "common_hits_annotations.csv"
))

common_hits_annotations
```

Join the information in the `common_hits_tbl_annotated` table with the `all_tbl_wide` table.

```{r}
all_tbl_annotated <- all_tbl |>
  left_join(
    common_hits_annotations,
    by = c("plate", "well", "control", "gene_symbol")
  ) |>
  relocate(nuclear_segmentation:label, .after = gene_symbol)

all_tbl_annotated
```

Pivot wider the table containing all the screen results and annotations to generate a wide format table for plotting. This is similar to the `all_tbl_wide` table, but it contains the annotations as well. In addition, add new indicator variables to show if a certain sgRNA is a hit or not for each cell line and for each parameter (i.e. Ripley's K or the number of CENPC spots per cell).

```{r}
cat_vec <- c(
  "Non-hit",
  "Other",
  "Chromatin structure",
  "Transcription",
  "Replication",
  "Nucleolus",
  "Nuclear pore",
  "Kinetochore"
)

all_tbl_wide_annotated <- all_tbl_annotated |>
  pivot_wider(
    names_from = cell_line,
    values_from = score_area_mean:sd_spots_number_mean
  ) |>
  relocate(
    c(
      score_k_corr_perc_mean_HCT116,
      score_k_corr_perc_mean_RPE1,
      score_spots_number_mean_HCT116,
      score_spots_number_mean_RPE1
    ),
    .after = gene_symbol
  ) |>
  mutate(
    nuclear_segmentation = if_else(
      is.na(nuclear_segmentation),
      "other",
      nuclear_segmentation
    ),
    category = if_else(is.na(category), "Non-hit", category),
    label = if_else(is.na(label), "no", label)
  ) |>
  mutate(category = factor(category, levels = cat_vec)) |>
  mutate(
    score_spots_number_direction = if_else(
      score_spots_number_mean_HCT116 * score_spots_number_mean_RPE1 >= 0,
      "Same",
      "Opposite"
    ),
    score_k_corr_perc_direction = if_else(
      score_k_corr_perc_mean_HCT116 * score_k_corr_perc_mean_RPE1 >= 0,
      "Same",
      "Opposite"
    ),
    spot_n_direction_HCT116 = if_else(
      score_spots_number_mean_HCT116 >= 0,
      "Higher",
      "Lower"
    ),
    spot_n_direction_RPE1 = if_else(
      score_spots_number_mean_RPE1 >= 0,
      "Higher",
      "Lower"
    ),
    clustering_HCT116 = if_else(
      score_k_corr_perc_mean_HCT116 >= 0,
      "Clustering",
      "Unclustering"
    ),
    clustering_RPE1 = if_else(
      score_k_corr_perc_mean_RPE1 >= 0,
      "Clustering",
      "Unclustering"
    )
  ) |>
  relocate(
    c(nuclear_segmentation:label, score_spots_number_direction:clustering_RPE1),
    .after = gene_symbol
  )

all_tbl_wide_annotated |>
  write_csv(here("output", "all_sgrna_tbl_annotated.csv"))

all_tbl_wide_annotated
```

### Sankey Plot

Reformat the `all_tbl_wide_annotated` table to be used in the Sankey plot.

```{r}
common_hits_sankey <- all_tbl_wide_annotated |>
  filter(category != "Non-hit" & nuclear_segmentation == "correct") |>
  select(
    `Gene Symbol` = gene_symbol,
    `Clustering HCT116` = clustering_HCT116,
    `Clustering RPE1` = clustering_RPE1,
    `Spot Number HCT116` = spot_n_direction_HCT116,
    `Spot Number RPE1` = spot_n_direction_RPE1,
    `Direction Spot Number` = score_spots_number_direction,
    `Direction K Clustering` = score_k_corr_perc_direction,
    Category = category
  ) |>
  mutate(count = 1)

common_hits_sankey
```

Generate a Sankey plot using the `common_hits_sankey` table to indicate how different sgRNA categories are related to each other.

```{r}
#| label: sankey-plot
#| fig-width: 20
#| fig-height: 12

common_hits_sankey |>
  gather_set_data(1:8) |>
  mutate(x = factor(x, labels = names(common_hits_sankey)[1:8])) |>
  ggplot(aes(x, id = id, split = y, value = count)) +
  geom_parallel_sets(
    aes(color = Category, fill = Category, alpha = 0.4),
    axis.width = 0.1,
    show.legend = FALSE
  ) +
  geom_parallel_sets_axes(axis.width = 0.1) +
  geom_parallel_sets_labels(
    angle = 0,
    nudge_x = -0.1,
    hjust = 0.95,
    size = 5
  ) +
  theme_few() +
  theme(
    axis.text = element_text(size = 25, angle = 45, vjust = 0.2, hjust = 0.95)
  )
```

### Bar Plots

Generate bar plots to show the magnitude of the effect of sgRNAs treatments across different categories.

```{r}
#| label: spot-n-bar-hct116
#| fig-width: 6
#| fig-height: 24

all_tbl_wide_annotated |>
  plot_bars(
    x_variable = score_spots_number_mean_HCT116,
    plot_title = "Number of Spots per Cell HCT116"
  )
```

```{r}
#| label: spot-n-bar-rpe1
#| fig-width: 6
#| fig-height: 24

all_tbl_wide_annotated |>
  plot_bars(
    x_variable = score_spots_number_mean_RPE1,
    plot_title = "Number of Spots per Cell RPE1"
  )
```

```{r}
#| label: k-corr-perc-bar-hct116
#| fig-width: 6
#| fig-height: 24

all_tbl_wide_annotated |>
  plot_bars(
    x_variable = score_k_corr_perc_mean_HCT116,
    plot_title = "Spots Clustering Z-Score HCT116"
  )
```

```{r}
#| label: k-corr-perc-bar-rpe1
#| fig-width: 6
#| fig-height: 24

all_tbl_wide_annotated |>
  plot_bars(
    x_variable = score_k_corr_perc_mean_RPE1,
    plot_title = "Spots Clustering Z-Score RPE1"
  )
```

### Plot Replicate1 vs. Replicate2

Plot Z-scores from replicate 1 vs. replicate 2 for each cell line.

```{r}
#| label: plot-replicates-spots-number
#| fig.height: 8
#| fig.width: 12

all_tbl_annotated |>
  plot_replicates(
    x_variable = norm_repeat1_spots_number_mean,
    y_variable = norm_repeat2_spots_number_mean,
    plot_title = "Number of Spots per Cell"
  )
```

```{r}
#| label: plot-replicates-k-corr-perc
#| fig.height: 8
#| fig.width: 12

all_tbl_annotated |>
  plot_replicates(
    x_variable = norm_repeat1_k_corr_perc_mean,
    y_variable = norm_repeat2_k_corr_perc_mean,
    plot_title = "Spots K Clustering Score"
  )
```

### Plot Cell Line vs. Cell Line

Compare the effect of sgRNAs treatments on the number of CENPC spots per cell and the clustering score of the spots in the nucleus between the two cell lines.

```{r}
#| label: spots-n-k-corr-perc-hct116
#| fig-width: 10
#| fig-height: 10

all_tbl_wide_annotated |>
  plot_points(
    x_variable = score_k_corr_perc_mean_HCT116,
    y_variable = score_spots_number_mean_HCT116,
    x_lab = "Z-Score Spots Clustering",
    y_lab = "Z-Score Number of Spots per Cell",
    plot_title = "HCT116"
  )
```

```{r}
#| label: spots-n-k-corr-perc-rpe1
#| fig-width: 10
#| fig-height: 10

all_tbl_wide_annotated |>
  plot_points(
    x_variable = score_k_corr_perc_mean_RPE1,
    y_variable = score_spots_number_mean_RPE1,
    x_lab = "Z-Score Spots Clustering",
    y_lab = "Z-Score Number of Spots per Cell",
    plot_title = "RPE1"
  )
```

```{r}
#| label: spots-n-hct116-rpe1
#| fig-width: 10
#| fig-height: 10

all_tbl_wide_annotated |>
  plot_points(
    x_variable = score_spots_number_mean_HCT116,
    y_variable = score_spots_number_mean_RPE1,
    x_lab = "Z-Score HCT116",
    y_lab = "Z-Score RPE1",
    plot_title = "Number of Spots per Cell"
  )
```

```{r}
#| label: k-corr-perc-hct116-rpe1
#| fig-width: 10
#| fig-height: 10

all_tbl_wide_annotated |>
  plot_points(
    x_variable = score_k_corr_perc_mean_HCT116,
    y_variable = score_k_corr_perc_mean_RPE1,
    x_lab = "Z-Score HCT116",
    y_lab = "Z-Score RPE1",
    plot_title = "Spots Clustering"
  )
```

### Statistics

```{r}
#| label: statistics

all_tbl_wide_annotated |>
  filter(control == "sample") |>
  summarise(
    corr_spots_n = cor(
      score_spots_number_mean_HCT116,
      score_spots_number_mean_RPE1,
      method = "pearson"
    ),
    corr_k_corr_perc = cor(
      score_k_corr_perc_mean_HCT116,
      score_k_corr_perc_mean_RPE1,
      method = "pearson"
    )
  )
```

Document the information about the analysis session

```{r}
#| label: session-info
#| results: markup

sessionInfo()
```
